# Preparing labels {#sec-labels-data-prep}

```{r}
#| echo: false
#| results: "asis"

source("../_common.R")
status("draft")
```
## Overview

In this chapter, we'll cover the process of preparing labels for use with MOSAIKS features. Labels are the observed values that we want to predict using our model. These could be crop yields, disease incidence, or any other variable of interest. Label data can come in many forms, including point observations, polygon aggregates, or gridded rasters, but the key is that they must have a spatial component. We take advantage of this spatial information to join the labels with the MOSAIKS features, which are also spatially explicit.

While MOSAIKS can involve many optional steps, its effective utilization necessitates two core components: 

1. Ground observations (labels)
1. Satellite features

Ensuring the spatial resolution is shared across both datasets and that they contain geographical data suitable for merging is crucial.

## Ground observations

### Resolution  

::: {.callout-note}

The MOSAIKS API is designed to predict outcomes at scales of 1 km² or larger. Customizable solutions are possible for higher resolution problems. 
:::

The preparation of label data for MOSAIKS hinges on multiple factors, particularly spatial information such as location, extent, and resolution. If the observations in a dataset have a higher resolution than 1 km², some form of selection or aggregation is required. Label data can come in any native spatial form: raster, point, polygon, or vector. As long as there is spatial information associated with each label data observation, these data can be joined to MOSAIKS imagery features for downstream prediction.

![Examples of label data formats that can be easily integrated into the MOSAIKS pipeline. Label data of any spatial format that can be aggregated to at least the scale of 1km² (or larger) can be used directly in combination with MOSAIKS imagery features for downstream prediction tasks. Examples shown here are from Rolf et al. (2021) and include: forest cover, elevation, population, and nighttime lights datasets (all raster format); income data (polygon format); road length (vector format); and housing price data (point format).](../images/rolf_et_al_2021-Fig_S4.png){#fig-label-agg}

### Sample size  

As with many machine learning algorithms, a large sample size often results in higher performance than low. MOSAIKS has been used and shown to be effective with a wide range of sample sizes (*N*). The sample size for model training is determined by the spatial and temporal resolution of your label data. For example, when predicting maize yields in the US using ground data from one year of farmer-level surveys in the US, *N*=3,143 if farmers are geolocated based on their county (even if far more than 3,143 farmers were interviewed, as this is the number of counties in the US). Additional time periods increase sample size for training, but also require more up-front costs, as more imagery need to be featurized.

The original MOSAIKS publication (Rolf et al., 2021) tested performance for forest cover, income, housing price, population density, nighttime luminosity, and elevation using sample sizes ranging from 60,000 to 100,000, but showed that performance fell only modestly when *N* shrank to just a few hundred observations. Consistent with this finding, in recent experiments with crop yield, we see high with only around 400 observations (R² = 0.80). It is important to note that the original crop yield dataset included interview data from thousands of farmers across the study country, and this messy data was cleaned and aggregated to the district level prior to modeling. In this case, a clean dataset with a low number of observations was preferred to a large but noisy dataset. Despite the low sample size of the aggregate data, performance was still comparable to more complex CNN models trained specifically on crop yield. 

::: {.callout-note}
As a rule of thumb, we recommend a sample size of at least 300 observations for training a MOSAIKS model, though every application is unique and may require more or fewer observations.
:::

### Data types

MOSAIKS accommodates both continuous (e.g., fraction of area forested) and discrete (e.g., presence/absence of water) labels, with data type influencing model development and testing. Performance metric selection is also determined by data type - for continuous variables, we typically use the coefficient of determination (R²), while for discrete variables, the area under the curve value from the receiver operator characteristic curve (ROC AUC score) is used.

### Checklist

For optimal use with MOSAIKS, label data should be:

- [ ] **Consistently geolocated** as point, polygon, vector, or raster data
- [ ] **Aggregable to ≥1km²** resolution
- [ ] **Observable** in daytime satellite imagery (directly or indirectly)
- [ ] **Recent or slow-changing** if using current API features
- [ ] **Sample size N≥300** (larger samples generally perform better)

## How do I obtain label data?

Label data can be obtained from a variety of sources, but MOSAIKS works best for variables with features that would be directly visible in or derived from satellite images (i.e. road length or population density from nighttime lights). What format should I use for my label data to download features?

To use the File Query to request features, data must be formatted as point data uploaded in CSV format with at least three columns. The first two columns should contain latitude and longitude coordinates, and the third column may contain the label value. Where input latitude and longitude coordinates do not fall exactly on the MOSAIKS global grid, they are allocated to the nearest point. As a result, the output file you receive may not share the same number of rows as your input. The ordering of points may also change.

The MOSAIKS feature resolution is on a 0.01 x 0.01 grid, centered at .005 degree intervals. For the labels and the features to merge, they must be at the same spatial resolution. This can be done through 2 ways: Approximating your label to match each centroid point on the dense grid. For example, if your label data point is located at 13.4568, -16.5911, you may choose to round the point to 2 decimal places and add or subtract 0.005 to match the nearest centroid (i.e. 13.455, -16.595) (Recommended) If your label is at a finer spatial resolution than the grid, you may wish to aggregate data points in your label to each grid cell. For example, you may wish to take an average of all label values that overlap with a grid cell, and assign that aggregate value to the cell.

## Joining data

### How do I merge my label data with MOSAIKS features?

Merging label data with MOSAIKS features requires that you first transform your data to a format that matches the features format. The MOSAIKS features are organized as rows of specific longitude and latitude coordinates and their associated features. Label data must also be cleaned and transformed to at least three columns. One column should contain longitude, another latitude, and the third the value for the variable of interest. You may also have more columns, but the three mentioned are the minimum requirement. Below are short descriptions of how label data of different types can be prepared to merge with MOSAIKS features. From polygon data

To create a tabular dataframe from a shape file of polygons, it must be converted to a grid of points that corresponds to the mosaiks grid. Essentially, this reasterizes the shape file to discrete longitude/latitude coordinates that can then be merged with the Mosaiks features. An example of how this can be done is provided in the example resources. From raster or points data

Point and raster label data is ready to merge with MOSAIKS features, as long as data is in a tabular formatted with separate longitude, latitude and label value columns. Coordinate precision should also be rounded to the precision of the MOSAIKS grid at. 005 degree intervals. From vector data

For vector data, the idea is to use the MOSAIKS grid cells to sum the length of the vector data in each grid cell. Then, the centroid of each grid cell can be used to query the API for features and allow for easy merging of label and features.

### What labels should look like

Before model training, label data must be joined to imagery features. The joined data should be tabular with each row containing:

1. **Label** - the observed value  
1. **Geographic location** - such as a MOSAIKS grid cell or larger geographic area  
1. **Time (optional)** - useful for time series data (year, mont, or day)  
1. ***K* feature columns** - column for every random satellite feature (typically *k* = 4,000)  

For example, a dataset with crop yield data could look like:

| Observation | District  | Year | Crop Yield | 
|-------------|-----------|------|------------|
| 1           | Chibombo  | 2019 | 1.520      | 
| 2           | Kabwe     | 2019 | 1.878      | 
| ...         | ...       | ...  | ...        | 
| *N*         | Kitwe     | 2019 | 2.383      | 

: Fictional crop yield data for three districts in Zambia. Each observation includes the district name, year, and crop yield in metric tons per hectare (mt/ha). {#tbl-crop-yield}

### What will the features look like?

Next, users will need to obtain features from the API that will spatially match with these labels. For instructions on how to download features, see @sec-intro-api and @sec-features-api.

And a dataset with district level aggregate features could look like:

| Observation | District  | Year | Feature 1 | Feature 2 | ... | Feature *K* |
|-------------|-----------|------|-----------|-----------|-----|-------------|
| 1           | Chibombo  | 2019 | 4.2       | 11.6      | ... | 12.7        |
| 2           | Kabwe     | 2019 | 2.9       | 5.3       | ... | 11.2        |
| ...         | ...       | ...  | ...       | ...       | ... | ...         |
| *N*         | Kitwe     | 2019 | 10.6      | 1.1       | ... | 2.2         |

: Fictional feature data for three districts in Zambia. Each observation includes the district name, year, and *K* features. {#tbl-features}

### How to join data

After downloading features from the API, users can then perform a spatial merge with their labels. A regression step on the merged dataset estimates the relationship between imagery features and the outcome variable of interest. Users can experiment with a variety of machine learning approaches in this last regression step. 

Finally, the joined dataset would look like:

| Observation | District  | Year | Crop Yield | Feature 1 | Feature 2 | ... | Feature *K* |
|-------------|-----------|------|------------|-----------|-----------|-----|-------------|
| 1           | Chibombo  | 2019 | 1.520      | 4.2       | 11.6      | ... | 12.7        |
| 2           | Kabwe     | 2019 | 1.878      | 2.9       | 5.3       | ... | 11.2        |
| ...         | ...       | ...  | ...        | ...       | ...       | ... | ...         |
| *N*         | Kitwe     | 2019 | 2.383      | 10.6      | 1.1       | ... | 2.2         |

: Joined dataset with crop yield and feature data for three districts in Zambia. Each observation includes the district name, year, crop yield, and *K* features. {#tbl-joined-data}

In the above example, our geographic location is the district and our label is the crop yield (mt/ha). We then have *K* columns containing the features and *N* observations. 

In this example, our features started at 1 km² resolution and were aggregated to the district level to match the crop yield data. To join this data, we first found all of the feature locations that fall within the district boundaries using a spatial join. Then we averaged the features within each district. This allowed us to have a single feature vector for each district. The resulting tabular data is ready for modeling.

## Data cleaning considerations

Before joining label data with MOSAIKS features, several key preparation steps should be considered:

### Geographic information


### Coordinate Reference Systems (CRS)

The default coordinate reference system used by MOSAIKS is World Geodetic System 84 (WGS 84). The standardized code that defines WGS 84 is ["EPSG:4326"](https://epsg.io/4326). EPSG stands for the [European Petroleum Survey Group](https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset), which maintains a database of coordinate systems and projections. The WGS 84 coordinate system is the most commonly used coordinate system for GPS data. If your data is not in WGS 84, you will need to reproject it to this coordinate system before joining it with MOSAIKS features.

![[Nine small-scale map projections.](https://www.researchgate.net/publication/273517879_User_preferences_for_world_map_projections)](https://www.researchgate.net/profile/Bojan-Savric/publication/273517879/figure/fig1/AS:347863067447297@1459948426262/The-nine-small-scale-map-projections-used-in-the-paired-comparison-test-arranged-by.png){#fig-map-projections}

- **Coordinate systems**: Ensure coordinates are in a projection consistent with the features (API uses decimal degrees - WGS84) (@fig-map-projections)
- **Spatial units**: Convert all geographic boundaries to same format (e.g., administrative regions)
- **Resolution matching**: Aggregate or disaggregate data to match MOSAIKS grid
- **Duplicate checking**: Remove duplicate locations within same time period
- **Missing coordinates**: Handle missing or invalid geographic information

### Label quality

- **Outliers**: Identify and handle extreme values
- **Missing values**: Decide on approach for handling NA/NULL values
- **Units**: Convert all measurements to consistent units
- **Data types**: Ensure numeric fields are properly formatted
- **Range checks**: Verify values fall within expected bounds

### Temporal alignment 

- **Time periods**: Match observation dates with feature timestamps
- **Seasonality**: Account for seasonal patterns in data collection
- **Aggregation**: Consider temporal aggregation needs (e.g., annual averages)
- **Gaps**: Handle missing time periods appropriately

## Data formats

::: {.callout-tip}
When working with large datasets, consider using efficient data formats like parquet, feather, GeoTIFF, or Zarr to reduce memory usage and speed up processing.
:::

MOSAIKS can work with several common spatial data formats:

| Data type | Common file formats | Description | Example |
|-----------|---------|-------------|-----|
| Point data | CSV, GeoJSON, Shapefile | Geographic coordinates | places of interest |
| Line data | GeoJSON, Shapefile | Geographic lines | Roads, rivers |
| Polygon data | GeoJSON, Shapefile | Geographic polygons | Buildings, mines, fields |
| Raster data | GeoTIFF, NetCDF, Zarr | Gridded data | Forest cover, elevation, land use |

: Common spatial data formats and their descriptions. {#tbl-spatial-data-formats}

::: {.callout-note}
# Looking forward

In the next chapter we'll look at working specifically with survey data, which presents unique challenges for spatial joining and aggregation.
:::





















<!-- ## Overview

In this chapter, we discuss the process of preparing labels for use with MOSAIKS features. Labels are the observed values we aim to predict with our model—such as crop yields, forest cover, or any other variable of interest. They can come in many spatial formats (e.g., points, polygons, or gridded rasters), but they must include a spatial component. We use this spatial information to join the labels with MOSAIKS features, which are also spatially explicit.

Although MOSAIKS offers many optional steps, two components are essential:

1. Ground observations (labels)  
2. Satellite features  

Both datasets must align in spatial resolution and contain appropriate geographic data for merging.

## Ground Observations

### Resolution

::: {.callout-note}
The MOSAIKS API is designed to predict outcomes at scales of 1 km² or larger. Custom solutions are possible for higher-resolution applications.  
:::

Preparing label data for MOSAIKS depends on location, extent, time, and resolution. When observations have a resolution finer than 1 km², you must select or aggregate them to match MOSAIKS’s 1 km² scale at the minimum. MOSAIKS can incorporate labels from raster, point, polygon, or vector data, provided each record is associated with a spatial location that can be joined to satellite imagery features.

![Examples of label data formats that can be easily integrated into the MOSAIKS pipeline. Label data of any spatial format that can be aggregated to at least the scale of 1km² (or larger) can be used directly in combination with MOSAIKS imagery features for downstream prediction tasks. Examples shown here are from Rolf et al. (2021) and include: forest cover, elevation, population, and nighttime lights datasets (all raster format); income data (polygon format); road length (vector format); and housing price data (point format).](../images/rolf_et_al_2021-Fig_S4.png){#fig-label-agg}

In some cases, you will find labels for administrative regions (states, districts, etc.). In this case, it might not come with geographic information at all, though it can usually be found online fairly easily. A good resource for this is the [Global Administrative Areas (GADM)](https://gadm.org/) database, which provides shapefiles for administrative boundaries at various levels of detail for most countries. It is important to remember that data can be messy and the names in your dataset might not match perfectly with the names in the GADM database or in the MOSAIKS API. Finding a way to comprehensively match these can be time consuming and difficult. Another challenge is that administrative boundaries are not always static and some regions undergo frequent changes. 

### Sample Size

Increasing sample size often yields higher model performance. MOSAIKS has demonstrated effectiveness across a wide range of sample sizes (*N*). The sample size depends on the spatial (and potentially temporal) resolution of your label data. For instance, if each record is aggregated at the county level, then *N* equals the number of counties. Incorporating multiple time periods can increase *N* but also requires more imagery to be featurized (see @sec-features-computing).

The original MOSAIKS publication (Rolf et al., 2021) evaluated models with sample sizes from 60,000 to 100,000, noting only modest performance declines with a few hundred observations. In recent crop yield experiments, high performance (R² = 0.80) was achieved with around 400 observations, provided the data were cleaned and aggregated to a district level. It is important to note that the original crop yield dataset included interview records from thousands of farmers across the study country. While this data has a large sample size, it is messy. In this case, a clean dataset with a low number of observations was preferred to a large but noisy dataset. 

::: {.callout-note}
As a general rule, a minimum of 300 observations for model training is recommended, though every application is unique and may require more or fewer observations.  
:::

### Data Types

MOSAIKS can accommodate both continuous labels (e.g., fraction of area forested) and discrete labels (e.g., water presence/absence). Data type informs model development, performance evaluation, and choice of metric (see @sec-model-choice). Continuous variables often use R², while discrete variables often use ROC AUC.

The data type may also effect how the data is cleaned and prepared. For example you may have a dataset of mining locations across a country. If you are interested in predicting the presence of mining, you may need to convert this to a binary variable where a 0 indicates no mining and a 1 indicates mining. Alternatively, you may be interested in predicting the area of mining in each location, in which case you might need to calculate the area of the mining polygons at each location and the variable would be continuous.

### Preparing Labels for MOSAIKS

::: {.callout-tip}
**Checklist for Label Data**  
Labels should be consistently geolocated (points, polygons, or rasters), aggregated to at least 1 km², observable by daytime satellite imagery (directly or indirectly), relatively current or slowly changing, and ideally have *N* ≥ 300.  
:::

## How Do I Obtain Label Data?

Labels can be obtained from many sources. MOSAIKS excels with targets that are directly visible in or derivable from satellite images (e.g., road length, population density from nighttime lights). If you plan to use the File Query to request MOSAIKS features, data must be point-based in CSV format with at least three columns: latitude, longitude, and an optional label column.

Because MOSAIKS’s global grid is defined at 0.01 × 0.01 degrees (centered at 0.005° intervals), any label coordinate will be snapped to the nearest grid centroid. Consequently, the number of returned rows or their ordering may differ from your input.

If your label resolution is finer than 1 km², you can aggregate multiple points to each MOSAIKS grid cell (e.g., compute an average). If your labels are coarser, you can disaggregate or approximate them to the MOSAIKS grid points, rounding coordinates to two decimal places and adjusting by 0.005 to match centroids.

## Joining Data

### Merging Labels with MOSAIKS Features

To merge labels with MOSAIKS features, align your label data with the grid used in the features. MOSAIKS feature files have rows with longitude, latitude, and feature columns. Your label dataset must also have columns for longitude, latitude, and label values (at minimum). Below are short guidelines for different spatial formats:

- **Polygon Data:** Convert polygons to a point-based representation that matches the MOSAIKS grid. This process “rasterizes” polygons into discrete longitude/latitude pairs.  
- **Raster or Point Data:** Ensure the table has separate columns for longitude, latitude, and label values, rounded to 0.01° increments.  
- **Vector Data:** Sum or aggregate line attributes within each grid cell to produce one value per cell, then associate each centroid with the aggregated value.

### Example Data Structure

A simple example: district-level crop yield labels might look like:

| Observation | District  | Year | Crop Yield |
|-------------|-----------|------|------------|
| 1           | Chibombo  | 2019 | 1.520      |
| 2           | Kabwe     | 2019 | 1.878      |
| ...         | ...       | ...  | ...        |
| *N*         | Kitwe     | 2019 | 2.383      |

: Fictional crop yield data for districts in Zambia. {#tbl-crop-yield}

MOSAIKS features (once aggregated to the same district boundaries) might look like:

| Observation | District  | Year | Feature 1 | Feature 2 | ... | Feature *K* |
|-------------|-----------|------|-----------|-----------|-----|-------------|
| 1           | Chibombo  | 2019 | 4.2       | 11.6      | ... | 12.7        |
| 2           | Kabwe     | 2019 | 2.9       | 5.3       | ... | 11.2        |
| ...         | ...       | ...  | ...       | ...       | ... | ...         |
| *N*         | Kitwe     | 2019 | 10.6      | 1.1       | ... | 2.2         |

: Fictional MOSAIKS feature data for the same districts. {#tbl-features}

After a spatial join or aggregation, you end up with a merged dataset:

| Observation | District  | Year | Crop Yield | Feature 1 | Feature 2 | ... | Feature *K* |
|-------------|-----------|------|------------|-----------|-----------|-----|-------------|
| 1           | Chibombo  | 2019 | 1.520      | 4.2       | 11.6      | ... | 12.7        |
| 2           | Kabwe     | 2019 | 1.878      | 2.9       | 5.3       | ... | 11.2        |
| ...         | ...       | ...  | ...        | ...       | ...       | ... | ...         |
| *N*         | Kitwe     | 2019 | 2.383      | 10.6      | 1.1       | ... | 2.2         |

: Example of joined data with both labels and features. {#tbl-joined-data}

## Data Cleaning Considerations

### Geographic Information

MOSAIKS uses the World Geodetic System 84 (WGS 84) coordinate system (EPSG:4326). If your data uses a different CRS, you must reproject it to WGS 84 before merging.

![[Nine small-scale map projections.](https://www.researchgate.net/publication/273517879_User_preferences_for_world_map_projections)](https://www.researchgate.net/profile/Bojan-Savric/publication/273517879/figure/fig1/AS:347863067447297@1459948426262/The-nine-small-scale-map-projections-used-in-the-paired-comparison-test-arranged-by.png){#fig-map-projections}

Make sure to confirm coordinate formats, spatial units, and the resolution. If you have finer-scale data, aggregate it to the MOSAIKS grid. Remove duplicated locations and handle missing coordinates or geometry.

### Label Quality

Confirm that label values are within expected ranges, deal with any outliers or missing data, and ensure units are consistent and numeric fields are properly formatted.  

### Temporal Alignment

If labels vary over time, align label timestamps with the MOSAIKS feature timestamps. Consider seasonal effects and how to handle missing time periods.

## Data Formats

::: {.callout-tip}
When working with large datasets, efficient data formats such as Parquet, Feather, GeoTIFF, or Zarr can reduce memory usage and improve processing speed.
:::

| Data Type  | Common File Formats           | Description            | Example                    |
|------------|-------------------------------|------------------------|----------------------------|
| Point Data | CSV, GeoJSON, Shapefile      | Coordinate pairs       | Places of interest         |
| Line Data  | GeoJSON, Shapefile           | Geographic lines       | Roads, rivers              |
| Polygon    | GeoJSON, Shapefile           | Geographic areas       | Buildings, fields          |
| Raster     | GeoTIFF, NetCDF, Zarr        | Gridded data          | Forest cover, elevation    |

: Common spatial data formats and descriptions. {#tbl-spatial-data-formats}

::: {.callout-note}
# Looking Forward

In the next chapter, we will explore survey data in detail, addressing the unique challenges of spatial joining and aggregation for questionnaires and interview-based datasets.
::: -->
