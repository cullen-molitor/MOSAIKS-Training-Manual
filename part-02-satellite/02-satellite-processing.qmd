# Processing imagery {#sec-satellite-processing}

```{r}
#| echo: false
#| results: "asis"

source("../_common.R")
status("draft")
```

## Overview

After selecting appropriate satellite imagery (as discussed in @sec-satellite-imagery), the next step is accessing and processing that imagery for use with MOSAIKS. This chapter covers key considerations and practical approaches for working with satellite data.

![Source: [Microsoft Planetary Computer](https://planetarycomputer.microsoft.com/)](../images/mpc_gallery.jpg)

## Cloud vs local processing

There are two main approaches to accessing and processing satellite imagery:

### Cloud-based platforms

Modern cloud platforms offer several advantages for satellite image processing:

- No need to download raw imagery
- Scalable computing resources
- Pre-configured environments
- Often include common datasets
- Pay only for what you use

Popular platforms include:

- Google Earth Engine
- Microsoft Planetary Computer
- Amazon Web Services
- Planet Platform
- Euro Data Cube

### Local processing

Traditional local processing may be preferred when:

- Internet connectivity is limited
- Data privacy is paramount
- Working with proprietary algorithms
- Computing needs are modest
- Frequent reuse of same imagery

Consider these factors when choosing:

- Data volume
- Processing complexity
- Budget constraints
- Time requirements
- Security needs

## Accessing imagery

### Cloud platforms

#### Google Earth Engine

```python
import ee
ee.Initialize()

# Get Sentinel-2 imagery
s2 = ee.ImageCollection('COPERNICUS/S2_SR')
  .filterDate('2019-01-01', '2019-12-31')
  .filterBounds(region)
```

#### Microsoft Planetary Computer

[Link to EDS 220](https://meds-eds-220.github.io/MEDS-eds-220-course/book/chapters/lesson-16-STAC.html)

Microsoft Planetary Computer provides a multi-petabyte catalog of global environmental data that can easily be accessed through APIs. The MPC API is based on the [STAC (SpatioTemporal Asset Catalog)](https://stacspec.org/en) specification, which is an emerging open standard for geospatial data that aims to increase the interoperability of geospatial data, particularly satellite imagery.

Use the `Client` function from the `pystac_client` package to access the catalog:

```python
import planetary_computer as pc
import pystac_client

# Access STAC API
catalog = pystac_client.Client.open(
    "https://planetarycomputer.microsoft.com/api/stac/v1",
    modifier=pc.sign_inplace,
)

# Define area of interest (downtown Santa Barbara, CA)
area_of_interest = {
    "type": "Polygon",
    "coordinates":[
        [
            [-119.70608227128903, 34.426300194372274],
            [-119.70608227128903, 34.42041139020533],
            [-119.6967885126002, 34.42041139020533],
            [-119.6967885126002, 34.426300194372274],
            [-119.70608227128903, 34.426300194372274]
        ]
    ],
}
bbox = rasterio.features.bounds(area_of_interest)

# Search for Sentinel-2 imagery
search = stac.search(
    bbox=bbox,
    datetime="2016-01-01/2020-12-31",
    collections=["sentinel-2-l2a"],
    query={"eo:cloud_cover": {"lt": 25}},
)
```
For more information on using the Microsoft Planetary Computer API, see [Reading Data from the STAC API](https://planetarycomputer.microsoft.com/docs/quickstarts/reading-stac/).


### Local downloads

#### Sentinel-2

```python
from sentinelsat import SentinelAPI

# Connect to Copernicus Open Access Hub
api = SentinelAPI('user', 'password')

# Search and download
products = api.query(
    area,
    date=('20190101', '20191231'),
    platformname='Sentinel-2'
)
```

#### Landsat

```python
import landsatxplore.api

# Initialize API
api = landsatxplore.api.API('user', 'password')

# Search scenes
scenes = api.search(
    dataset='landsat_ot_c2_l2',
    bbox=bbox,
    start_date='2019-01-01',
    end_date='2019-12-31'
)
```

## Processing steps

### 1. Quality assessment

- Cloud detection
- Shadow masking
- Bad pixel identification
- Sensor artifacts removal

### 2. Atmospheric correction

- Convert to surface reflectance
- Account for atmospheric effects
- Standardize across images

### 3. Geometric correction

- Orthorectification
- Co-registration
- Projection alignment

### 4. Mosaicking

- Image stitching
- Feathering/blending
- Gap filling
- Color balancing

### 5. Temporal compositing

- Best-pixel selection
- Weighted averaging
- Gap filling
- Smoothing

## Processing workflows

### Example cloud-based workflow

```python
def process_sentinel2(aoi, start_date, end_date):
    """
    Process Sentinel-2 imagery on Google Earth Engine
    
    Parameters:
    -----------
    aoi : ee.Geometry
        Area of interest
    start_date : str
        Start date (YYYY-MM-DD)
    end_date : str
        End date (YYYY-MM-DD)
        
    Returns:
    --------
    ee.Image
        Processed composite image
    """
    s2 = ee.ImageCollection('COPERNICUS/S2_SR') \
        .filterBounds(aoi) \
        .filterDate(start_date, end_date)
    
    # Cloud masking
    def mask_clouds(img):
        clouds = img.select('QA60').bitwiseAnd(1 << 10)
        return img.updateMask(clouds.Not())
    
    # Apply cloud mask
    s2_masked = s2.map(mask_clouds)
    
    # Create median composite
    composite = s2_masked.median()
    
    return composite
```

### Example local workflow

```python
def process_local_images(image_dir):
    """
    Process downloaded satellite imagery
    
    Parameters:
    -----------
    image_dir : str
        Directory containing images
        
    Returns:
    --------
    numpy.ndarray
        Processed image array
    """
    import rasterio
    from rasterio.merge import merge
    
    # List images
    images = []
    for file in os.listdir(image_dir):
        if file.endswith('.tif'):
            with rasterio.open(os.path.join(image_dir, file)) as src:
                images.append(src)
    
    # Merge images
    mosaic, transform = merge(images)
    
    return mosaic
```

## Best practices

1. **Document everything**
   - Processing steps
   - Parameter choices
   - Quality control decisions
   - Software versions

2. **Validate outputs**
   - Visual inspection
   - Statistical checks
   - Ground truth comparison
   - Cross-platform verification

3. **Optimize resources**
   - Batch processing
   - Parallel computing
   - Memory management
   - Storage efficiency

4. **Version control**
   - Track code changes
   - Archive key datasets
   - Document dependencies
   - Maintain reproducibility

## Common challenges

### Storage requirements

- Raw imagery can be massive
- Multiple processing steps multiply storage needs
- Intermediate products management
- Backup considerations

### Computing resources

- Processing can be CPU/GPU intensive
- Memory limitations
- I/O bottlenecks
- Network bandwidth

### Quality issues

- Cloud contamination
- Atmospheric effects
- Sensor artifacts
- Geometric distortions

### Time management

- Processing can be slow
- Download times
- Quality checking
- Iteration cycles

## Future considerations

As you develop your processing pipeline, consider:

- Scalability needs
- Automation opportunities
- Quality control requirements
- Resource constraints
- Time limitations

::: {.callout-note}
# Looking forward

In the next section, we will explore how to extract MOSAIKS features from processed imagery.
:::
