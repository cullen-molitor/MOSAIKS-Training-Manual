{
  "hash": "2b176a0fc4df13ace1c1fe5803356dad",
  "result": {
    "engine": "knitr",
    "markdown": "# Compute setup {#sec-intro-compute}\n\n\n\n\n\n:::: status\n::: callout-warning \nThis chapter is in early draft form and may be incomplete.\n:::\n::::\n\n\n\n\nThis course will primarily use Google Colaboratory (Colab) for our computational needs. Colab is a free, cloud-based platform that allows you to write and execute Python code through your browser. It comes with many pre-installed libraries and provides free access to computing resources, including GPUs.\n\n## Requirements\n\nTo participate in the coding portions of this course, you'll need:\n\n- A laptop or desktop computer \n- Reliable internet connection\n- A Google account (if you don't have one, create one at accounts.google.com)\n- A modern web browser (Chrome recommended)\n\n## Getting started with Google Colab \n\n### Accessing Colab\n\n1. Go to [colab.research.google.com](https://colab.research.google.com)\n2. Sign in with your Google account \n3. Click \"New Notebook\" to create your first Colab notebook\n\n### Understanding the interface\n\nThe Colab interface is similar to Jupyter notebooks, with a few key components:\n\n- **Menu Bar**: Contains File, Edit, View, Insert, Runtime, Tools, and Help options\n- **Toolbar**: Quick access to common actions like adding code/text cells\n- **Cell Area**: Where you write and execute code or text \n- **Runtime Status**: Shows the state of your notebook's connection to Google's servers\n\n### Basic operations\n\n1. **Creating Cells**:\n   - Code cells: Click \"+ Code\" or use Ctrl+M B\n   - Text cells: Click \"+ Text\" or use Ctrl+M M\n\n2. **Running Cells**:\n   - Click the play button next to the cell\n   - Use Shift+Enter \n   - Select Runtime > Run all from the menu\n\n3. **Cell Types**:\n   - Code cells: For Python code execution\n   - Text cells: For documentation (supports Markdown)\n\n### Important features\n\n1. **Runtime Type**:\n   - Click Runtime > Change runtime type\n   - Select Python 3 as the runtime\n   - For GPU access: Change hardware accelerator to GPU when needed\n\n2. **File Management**:\n   - Files uploaded to Colab are temporary\n   - Connect to Google Drive for persistent storage:\n\n```python\nfrom google.colab import drive\ndrive.mount('/content/drive')\n```\n\n3. **Package Installation:**\n\nInstall additional packages using:\n\n::: {.panel-tabset}\n## conda\n```python\n# add a -c conda-forge to select the conda-forge channel\n# add a -q flag to install quietly (reduced output)\n# add a -y flag to prememptively accept other changes\n!conda install package_name\n```\n## pip\n```python\n!pip install package_name\n```\n:::\n\n### Best practices\n\n1. Save Your Work:\n   - Regularly save to Google Drive (File > Save a copy in Drive)\n   - Download important notebooks locally as backups\n   \n2. Resource Management:\n   - Close unused notebooks to free up resources\n   - Be aware of idle timeouts (notebooks disconnect after extended inactivity)\n\n3. Memory Usage:\n   - Monitor memory usage through Runtime > Resource usage\n   - Use Runtime > Factory reset runtime if you run into memory issues\n\n### Keyboard shortcuts\n\nHere are the most useful keyboard shortcuts for working in Colab:\n\n::: {.panel-tabset}\n\n## Windows/Linux\n| Action | Shortcut |\n|--------|----------|\n| Run current cell | Ctrl+Enter |\n| Run cell and move to next | Shift+Enter |\n| Run cell and insert below | Alt+Enter |\n| Insert code cell above | Ctrl+M A |\n| Insert code cell below | Ctrl+M B |\n| Convert to text cell | Ctrl+M M |\n| Convert to code cell | Ctrl+M Y |\n| Delete current cell | Ctrl+M D |\n| Toggle line numbers | Ctrl+M L |\n| Toggle output | Ctrl+M O |\n| Cut cell | Ctrl+M X |\n| Copy cell | Ctrl+M C |\n| Paste cell below | Ctrl+M V |\n| Select multiple cells | Shift+Up/Down |\n| Find and replace | Ctrl+F |\n| Save notebook | Ctrl+S |\n\n## Mac\n| Action | Shortcut |\n|--------|----------|\n| Run current cell | ⌘+Enter |\n| Run cell and move to next | Shift+Enter |\n| Run cell and insert below | Option+Enter |\n| Insert code cell above | ⌘+M A |\n| Insert code cell below | ⌘+M B |\n| Convert to text cell | ⌘+M M |\n| Convert to code cell | ⌘+M Y |\n| Delete current cell | ⌘+M D |\n| Toggle line numbers | ⌘+M L |\n| Toggle output | ⌘+M O |\n| Cut cell | ⌘+M X |\n| Copy cell | ⌘+M C |\n| Paste cell below | ⌘+M V |\n| Select multiple cells | Shift+Up/Down |\n| Find and replace | ⌘+F |\n| Save notebook | ⌘+S |\n\n:::\n\nYou can view all available shortcuts in Colab by pressing Ctrl+M H (⌘+M H on Mac) or through Help > Keyboard shortcuts in the menu.\n\n### Common issues and solutions\n\n1. Runtime Disconnections:\n   - Click \"Reconnect\" when prompted\n   - Your variables will be reset, but saved code remains\n\n2. Package Installation Issues:\n   - Restart runtime after installing new packages\n   - Use Runtime > Restart runtime\n\n3. Memory Errors:\n   - Clear unnecessary variables\n   - Restart runtime\n   - Consider using smaller data samples during development\n\n::: {.callout-important}\nMemory errors are common when working with large datasets or complex models on the free tier of Colab. If you encounter these issues, consider using a paid version of Colab or connecting a Google Cloud Platform vitual machine (VM).\n:::\n\n### Getting help\n\n- Access Colab's built-in documentation: `Help > Colab Overview`\n- View keyboard shortcuts: `Help > Keyboard shortcuts`\n- Search the Help menu for specific topics\n- Use the `Help > Search Solutions` feature\n\n## AI assistance in Colab\n\nGoogle Gemini is a powerful AI assistant that is seemlesly integrated with Google Colab. You can use it to generate code, comments, or markdown text to improve your notebooks. Gemini can be accessed in several ways in Colab to help you with your work, all start by selecting the Gemini icon in different parts of the notebook editor.\n\n::: {.callout-note}\n# Gemini icon\n\n<img src=\"https://lh3.googleusercontent.com/c-z7BK6NYcQIruZJd9A4KI1m8YrBauXH0VRglPudmj9Fgr5yzgJCsnaZ5W_nxZnB2hazA9hsg05uX1djFYPbMS-DsbYXp6UtVKFfdicBfF8klhVshJ8\" width=\"50\" height=\"50\">\n\nLook for this icon to indicate where you can click to access Gemini in Colab.\n:::\n\nHere are a few ways you can use Google Gemini effectively in Colab:\n\n### Chat support\n\nClick the \"Gemini\" button in the top-right corner to open a chat interface where you can ask questions about your code, debug issues, or get explanations of concepts. This option is especially useful for beginners or for complex problems.\n\n### Code generation\n\nUse the \"Generate code\" option (the sparkle icon) above any **empty** code cell to generate new code based on your description. You can ask it to many different things including:\n\n- Loading a dataset called `my_data.csv`\n- Plot a histogram of the data\n- Build a model to predict `y` from `X`\n\n### Code explanation\n\nUse the \"Explain code\" option (the sparkle icon) above any **complete** code cell to open a chat interface that will automatically explain the code in the cell. This is useful for understanding code written by someone else, learning new concepts you are not familiar with, or getting a second opinion on your work.\n\n### Code completion\n\nColab provides intelligent autocomplete as you type:\n\n- Press Tab to accept suggestions\n- Use Ctrl+Space (Cmd+Space on Mac) to manually trigger suggestions\n- Get real-time documentation and parameter hints\n\n::: {.callout-note}\nWhile these AI tools are helpful, always review and understand the code they suggest before using it in your work.\n:::\n\n## Accessing course notebooks\n\nAll course notebooks are hosted on GitHub and can be accessed directly in Google Colab. There are two ways to access the notebooks:\n\n### Method 1: Direct links\n\nEach section of this book includes direct \"Open in Colab\" links for relevant notebooks. Simply click the badge to open the notebook:\n\nExample [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/microsoft/PlanetaryComputerExamples/blob/main/tutorials/mosaiks.ipynb)\n\n### Method 2: Clone the notebook\n\nTo choose a notebook from the repository (Add link to demo/interactive notebooks here):\n\n1. Open Google Colab (colab.research.google.com)\n2. Click `File > Open Notebook`\n3. Select the `GitHub` tab\n4. Enter the repository URL: `https://github.com/[username]/[repo]` (UPDATE WITH REPO)\n5. Select the notebook you want to open\n\n### Saving your work\n\nWhen you open a notebook from GitHub in Colab, it creates a temporary copy. To save your work:\n\n1. Click `File > \"Save a copy in Drive\"`\n2. This creates your own editable copy in your Google Drive\n3. All future changes will be saved to your copy\n\n### Notebook organization\n\nThe course notebooks are organized into:  \n\n- `demos/`: Complete demonstration notebooks\n- `exercises/`: Interactive notebooks with exercises to complete\n- `solutions/`: Complete versions of exercise notebooks\n\nEach notebook includes:  \n\n- Clear instructions in markdown cells\n- Code cells with examples or exercises\n- TO DO sections for exercises\n- Validation cells to check your work\n\n## Data access and management\n\nThere are several ways to access data in Colab notebooks. Here are the main approaches:\n\n### Direct downloads \n\nFor data hosted on repositories like Zenodo, you can download directly using wget:\n\n```python\n# Set the data directory\ndata_dir = \"LSMS-ISA-data\"\n\n# Download the data\n!wget https://zenodo.org/records/14040658/files/Data.zip\n\n# Unzip and organize\n!unzip Data.zip\n!mv Data {data_dir}\n!rm Data.zip\n```\n\n### Google Drive integration\n\nFor data stored in Google Drive:\n\n1. First mount your Google Drive:\n\n```python\nfrom google.colab import drive\ndrive.mount('/content/drive')\n```\n\n2. Access your data using the mounted path:\n\n```python\ndrive_path = \"/content/drive/MyDrive/project_folder\"\n```\n\n3. For better performance, copy data to local VM storage:\n\n::: {.callout-note}\nRemember that the VM's storage is temporary - files will be deleted when the runtime disconnects. Always keep a backup of your data in Drive or another permanent storage location.\n:::\n\n```python\nimport os\nimport shutil\n\n# Create local directory\nlocal_dir = \"/content/data/\"\nos.makedirs(local_dir, exist_ok=True)\n\n# Copy data from Drive to VM\ndrive_data = os.path.join(drive_path, \"my_data\") \nshutil.copytree(drive_data, local_dir, dirs_exist_ok=True)\n```\n\n### Why copy data to the VM?\n\nWhen working with data in Colab, copying files from Google Drive to the virtual machine (VM) can significantly improve performance:\n\n1. **Faster Access**: Reading directly from Google Drive requires data to be transferred over the network for each operation. Local VM storage provides much faster read/write speeds.\n\n2. **Reduced Latency**: Network latency between Colab and Google Drive can slow down operations that require multiple data accesses. Local data eliminates this latency.\n\n3. **More Reliable**: Network connectivity issues or Drive access problems won't interrupt your analysis once data is copied locally.\n\n4. **Better for Iterative Processing**: If your code needs to read the same data multiple times (like in machine learning training loops), local access is much more efficient.\n\nFor example, reading a 1GB dataset from Drive might take 30 seconds, while reading from local VM storage could take just a few seconds. The time spent copying data once at the start of your session can save significant time during analysis. This can be especially true in a notebook environment when a user is developing code and may need to access and reaccess the data multiple times. \n\n::: {.callout-note}\n# Looking forward\n\nIn the next chapter we will take a closer look at MOSAIKS. \n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}