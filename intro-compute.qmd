# Compute setup

```{r}
#| echo: false
#| results: "asis"

source("_common.R")
status("draft")
```

This course will primarily use Google Colaboratory (Colab) for our computational needs. Colab is a free, cloud-based platform that allows you to write and execute Python code through your browser. It comes with many pre-installed libraries and provides free access to computing resources, including GPUs.

## Requirements

To participate in the coding portions of this course, you'll need:

- A laptop or desktop computer 
- Reliable internet connection
- A Google account (if you don't have one, create one at accounts.google.com)
- A modern web browser (Chrome recommended)

## Getting started with Google Colab 

### Accessing Colab

1. Go to [colab.research.google.com](https://colab.research.google.com)
2. Sign in with your Google account 
3. Click "New Notebook" to create your first Colab notebook

### Understanding the interface

The Colab interface is similar to Jupyter notebooks, with a few key components:

- **Menu Bar**: Contains File, Edit, View, Insert, Runtime, Tools, and Help options
- **Toolbar**: Quick access to common actions like adding code/text cells
- **Cell Area**: Where you write and execute code or text 
- **Runtime Status**: Shows the state of your notebook's connection to Google's servers

### Basic operations

1. **Creating Cells**:
   - Code cells: Click "+ Code" or use Ctrl+M B
   - Text cells: Click "+ Text" or use Ctrl+M M

2. **Running Cells**:
   - Click the play button next to the cell
   - Use Shift+Enter 
   - Select Runtime > Run all from the menu

3. **Cell Types**:
   - Code cells: For Python code execution
   - Text cells: For documentation (supports Markdown)

### Important features

1. **Runtime Type**:
   - Click Runtime > Change runtime type
   - Select Python 3 as the runtime
   - For GPU access: Change hardware accelerator to GPU when needed

2. **File Management**:
   - Files uploaded to Colab are temporary
   - Connect to Google Drive for persistent storage:

```python
from google.colab import drive
drive.mount('/content/drive')
```

3. **Package Installation:**

Install additional packages using:

::: {.panel-tabset}
## conda
```python
# add a -c conda-forge to select the conda-forge channel
# add a -q flag to install quietly (reduced output)
# add a -y flag to prememptively accept other changes
!conda install package_name
```
## pip
```python
!pip install package_name
```
:::

### Best practices

1. Save Your Work:
   - Regularly save to Google Drive (File > Save a copy in Drive)
   - Download important notebooks locally as backups
   
2. Resource Management:
   - Close unused notebooks to free up resources
   - Be aware of idle timeouts (notebooks disconnect after extended inactivity)

3. Memory Usage:
   - Monitor memory usage through Runtime > Resource usage
   - Use Runtime > Factory reset runtime if you run into memory issues

### Keyboard shortcuts

Here are the most useful keyboard shortcuts for working in Colab:

::: {.panel-tabset}

## Windows/Linux
| Action | Shortcut |
|--------|----------|
| Run current cell | Ctrl+Enter |
| Run cell and move to next | Shift+Enter |
| Run cell and insert below | Alt+Enter |
| Insert code cell above | Ctrl+M A |
| Insert code cell below | Ctrl+M B |
| Convert to text cell | Ctrl+M M |
| Convert to code cell | Ctrl+M Y |
| Delete current cell | Ctrl+M D |
| Toggle line numbers | Ctrl+M L |
| Toggle output | Ctrl+M O |
| Cut cell | Ctrl+M X |
| Copy cell | Ctrl+M C |
| Paste cell below | Ctrl+M V |
| Select multiple cells | Shift+Up/Down |
| Find and replace | Ctrl+F |
| Save notebook | Ctrl+S |

## Mac
| Action | Shortcut |
|--------|----------|
| Run current cell | ⌘+Enter |
| Run cell and move to next | Shift+Enter |
| Run cell and insert below | Option+Enter |
| Insert code cell above | ⌘+M A |
| Insert code cell below | ⌘+M B |
| Convert to text cell | ⌘+M M |
| Convert to code cell | ⌘+M Y |
| Delete current cell | ⌘+M D |
| Toggle line numbers | ⌘+M L |
| Toggle output | ⌘+M O |
| Cut cell | ⌘+M X |
| Copy cell | ⌘+M C |
| Paste cell below | ⌘+M V |
| Select multiple cells | Shift+Up/Down |
| Find and replace | ⌘+F |
| Save notebook | ⌘+S |

:::

You can view all available shortcuts in Colab by pressing Ctrl+M H (⌘+M H on Mac) or through Help > Keyboard shortcuts in the menu.

### Common issues and solutions

1. Runtime Disconnections:
   - Click "Reconnect" when prompted
   - Your variables will be reset, but saved code remains

2. Package Installation Issues:
   - Restart runtime after installing new packages
   - Use Runtime > Restart runtime

3. Memory Errors:
   - Clear unnecessary variables
   - Restart runtime
   - Consider using smaller data samples during development

### Getting help

- Access Colab's built-in documentation: `Help > Colab Overview`
- View keyboard shortcuts: `Help > Keyboard shortcuts`
- Search the Help menu for specific topics
- Use the `Help > Search Solutions` feature

## Accessing course notebooks

All course notebooks are hosted on GitHub and can be accessed directly in Google Colab. There are two ways to access the notebooks:

### Method 1: Direct links
Each section of this book includes direct "Open in Colab" links for relevant notebooks. Simply click the badge to open the notebook:

Example [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/microsoft/PlanetaryComputerExamples/blob/main/tutorials/mosaiks.ipynb)

### Method 2: Clone the notebook
To choose a notebook from the repository (Add link to demo/interactive notebooks here):

1. Open Google Colab (colab.research.google.com)
2. Click `File > Open Notebook`
3. Select the `GitHub` tab
4. Enter the repository URL: `https://github.com/[username]/[repo]` (UPDATE WITH REPO)
5. Select the notebook you want to open

### Saving your work

When you open a notebook from GitHub in Colab, it creates a temporary copy. To save your work:

1. Click `File > "Save a copy in Drive"`
2. This creates your own editable copy in your Google Drive
3. All future changes will be saved to your copy

### Notebook organization

The course notebooks are organized into:  

- `demos/`: Complete demonstration notebooks
- `exercises/`: Interactive notebooks with exercises to complete
- `solutions/`: Complete versions of exercise notebooks

Each notebook includes:  

- Clear instructions in markdown cells
- Code cells with examples or exercises
- TODO sections for exercises
- Validation cells to check your work

## Data access and management

There are several ways to access data in Colab notebooks. Here are the main approaches:

### Direct downloads 

For data hosted on repositories like Zenodo, you can download directly using wget:

```python
# Set the data directory
data_dir = "LSMS-ISA-data"

# Download the data
!wget https://zenodo.org/records/14040658/files/Data.zip

# Unzip and organize
!unzip Data.zip
!mv Data {data_dir}
!rm Data.zip
```

### Google Drive integration

For data stored in Google Drive:

1. First mount your Google Drive:

```python
from google.colab import drive
drive.mount('/content/drive')
```

2. Access your data using the mounted path:

```python
drive_path = "/content/drive/MyDrive/project_folder"
```

3. For better performance, copy data to local VM storage:

::: {.callout-note}
Remember that the VM's storage is temporary - files will be deleted when the runtime disconnects. Always keep a backup of your data in Drive or another permanent storage location.
:::

```python
import os
import shutil

# Create local directory
local_dir = "/content/data/"
os.makedirs(local_dir, exist_ok=True)

# Copy data from Drive to VM
drive_data = os.path.join(drive_path, "my_data") 
shutil.copytree(drive_data, local_dir, dirs_exist_ok=True)
```

### Why copy data to the VM?

When working with data in Colab, copying files from Google Drive to the virtual machine (VM) can significantly improve performance:

1. **Faster Access**: Reading directly from Google Drive requires data to be transferred over the network for each operation. Local VM storage provides much faster read/write speeds.

2. **Reduced Latency**: Network latency between Colab and Google Drive can slow down operations that require multiple data accesses. Local data eliminates this latency.

3. **More Reliable**: Network connectivity issues or Drive access problems won't interrupt your analysis once data is copied locally.

4. **Better for Iterative Processing**: If your code needs to read the same data multiple times (like in machine learning training loops), local access is much more efficient.

For example, reading a 1GB dataset from Drive might take 30 seconds, while reading from local VM storage could take just a few seconds. The time spent copying data once at the start of your session can save significant time during analysis. This can be especially true in a notebook environment when a user is developing code and may need to access and reaccess the data multiple times. 

::: {.callout-note}
# Looking forward

In the next chapter we will take a closer look at MOSAIKS. 
:::

